
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:uswheat/utils/app_colors.dart';

class AppTextField {
  static TextFormField textField(
      BuildContext context, {
        String hintText = "",
        Icon? icon,
        TextEditingController? controller,
        Key? key,
        FormFieldValidator<String>? validator,
        FocusNode? focusNode,
        InputDecoration? decoration,
        UndoHistoryController? undoHistoryController,
        TextInputType? keyboardType,
        TextInputAction? textInputAction,
        TextCapitalization textCapitalization = TextCapitalization.none,
        TextStyle? style,
        StrutStyle? strutStyle,
        TextAlign textAlign = TextAlign.start,
        TextAlignVertical? textAlignVertical,
        TextDirection? textDirection,
        bool readOnly = false,
        ToolbarOptions? toolbarOptions,
        bool? showCursor,
        bool autofocus = false,
        bool? enableInteractiveSelection,
        TextSelectionControls? selectionControls,
        VoidCallback? onTap,
        TapRegionCallback? onTapOutside,
        bool onTapAlwaysCalled = false,
        MouseCursor? mouseCursor,
        InputCounterWidgetBuilder? buildCounter,
        ScrollController? scrollController,
        ScrollPhysics? scrollPhysics,
        List<String>? autofillHints,
        ContentInsertionConfiguration? contentInsertionConfiguration,
        Clip clipBehavior = Clip.hardEdge,
        String? restorationId,
        bool scribbleEnabled = true,
        bool enableIMEPersonalizedLearning = true,
        bool canRequestFocus = true,
        SpellCheckConfiguration? spellCheckConfiguration,
        TextMagnifierConfiguration? magnifierConfiguration,
        bool obscureText = false,
        String obscuringCharacter = '•',
        bool autocorrect = true,
        SmartDashesType? smartDashesType,
        SmartQuotesType? smartQuotesType,
        bool enableSuggestions = true,
        int maxLines = 1,
        int? minLines,
        bool expands = false,
        int? maxLength,
        MaxLengthEnforcement? maxLengthEnforcement,
        ValueChanged<String>? onChanged,
        VoidCallback? onEditingComplete,
        ValueChanged<String>? onSubmitted,
        AppPrivateCommandCallback? onAppPrivateCommand,
        List<TextInputFormatter>? inputFormatters,
        bool? enabled,
        bool? ignorePointers,
        double cursorWidth = 2.0,
        double? cursorHeight,
        Radius? cursorRadius,
        bool? cursorOpacityAnimates,
        Color? cursorColor,
        Color? cursorErrorColor,
        Brightness? keyboardAppearance,
        EdgeInsets scrollPadding = const EdgeInsets.all(20.0),
        DragStartBehavior dragStartBehavior = DragStartBehavior.start,
      }) {
    return TextFormField(
      key: key,
      controller: controller,
      focusNode: focusNode,
      undoController: undoHistoryController,
      keyboardType: keyboardType,
      textInputAction: textInputAction,
      textCapitalization: textCapitalization,
      style: Theme.of(context).textTheme.labelLarge?.copyWith(color: (Theme.of(context).brightness == Brightness.light) ? AppColors.c000000 : AppColors.cFFFFFF),
      strutStyle: strutStyle,
      textAlign: textAlign,
      textAlignVertical: textAlignVertical,
      textDirection: textDirection,
      readOnly: readOnly,
      toolbarOptions: toolbarOptions,
      validator: validator,
      showCursor: showCursor,
      autofocus: autofocus,
      enableInteractiveSelection: enableInteractiveSelection,
      selectionControls: selectionControls,
      onTap: onTap,
      onTapOutside: onTapOutside,
      onTapAlwaysCalled: onTapAlwaysCalled,
      mouseCursor: mouseCursor,
      buildCounter: buildCounter,
      scrollController: scrollController,
      scrollPhysics: scrollPhysics,
      autofillHints: autofillHints,
      contentInsertionConfiguration: contentInsertionConfiguration,
      clipBehavior: clipBehavior,
      restorationId: restorationId,
      scribbleEnabled: scribbleEnabled,
      enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
      canRequestFocus: canRequestFocus,
      spellCheckConfiguration: spellCheckConfiguration,
      magnifierConfiguration: magnifierConfiguration,
      obscureText: obscureText,
      obscuringCharacter: obscuringCharacter,
      autocorrect: autocorrect,
      smartDashesType: smartDashesType,
      smartQuotesType: smartQuotesType,
      enableSuggestions: enableSuggestions,
      maxLines: maxLines,
      minLines: minLines,
      expands: expands,
      maxLength: maxLength,
      maxLengthEnforcement: maxLengthEnforcement,
      onChanged: onChanged,
      onEditingComplete: onEditingComplete,
      onAppPrivateCommand: onAppPrivateCommand,
      inputFormatters: inputFormatters,
      enabled: enabled,
      ignorePointers: ignorePointers,
      cursorWidth: cursorWidth,
      cursorHeight: cursorHeight,
      cursorRadius: cursorRadius,
      cursorOpacityAnimates: cursorOpacityAnimates,
      cursorColor: (Theme.of(context).brightness == Brightness.light) ? AppColors.c000000 : AppColors.cFFFFFF,
      cursorErrorColor: cursorErrorColor,
      keyboardAppearance: keyboardAppearance,
      scrollPadding: scrollPadding,
      dragStartBehavior: dragStartBehavior,
      decoration: InputDecoration(
        suffixIcon: icon,
        iconColor: (Theme.of(context).brightness == Brightness.light) ? AppColors.cEFEEED : AppColors.c353d4a,
        filled: true,
        fillColor: (Theme.of(context).brightness == Brightness.light) ? AppColors.cFFFFFF : AppColors.c353d4a,
        contentPadding: const EdgeInsets.symmetric(vertical: 5, horizontal: 8),
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(6),
          borderSide: BorderSide(
            color: (Theme.of(context).brightness == Brightness.light) ? AppColors.cEFEEED : AppColors.c353d4a,
            width: (Theme.of(context).brightness == Brightness.light) ? 2 : 0,
          ),
        ),
        counterText: "",
        enabledBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(6),
          borderSide: BorderSide(
            color: (Theme.of(context).brightness == Brightness.light) ? AppColors.cEFEEED : AppColors.c353d4a,
            width: (Theme.of(context).brightness == Brightness.light) ? 2 : 0,
          ),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(6),
          borderSide: BorderSide(
            color: (Theme.of(context).brightness == Brightness.light) ? AppColors.cEFEEED : AppColors.c353d4a,
            width: (Theme.of(context).brightness == Brightness.light) ? 2 : 0,
          ),
        ),
      ),
    );
  }

  static TextField textFieldNoBorder(
      BuildContext context, {
        String hintText = "",
        Icon? icon,
        TextEditingController? controller,
        Key? key,
        FocusNode? focusNode,
        InputDecoration? decoration,
        // InputDecoration? decoration,
        UndoHistoryController? undoHistoryController,
        TextInputType? keyboardType,
        TextInputAction? textInputAction,
        TextCapitalization textCapitalization = TextCapitalization.none,
        TextStyle? style,
        StrutStyle? strutStyle,
        TextAlign textAlign = TextAlign.start,
        TextAlignVertical? textAlignVertical,
        TextDirection? textDirection,
        bool readOnly = false,
        ToolbarOptions? toolbarOptions,
        bool? showCursor,
        bool autofocus = false,
        bool? enableInteractiveSelection,
        TextSelectionControls? selectionControls,
        VoidCallback? onTap,
        TapRegionCallback? onTapOutside,
        bool onTapAlwaysCalled = false,
        MouseCursor? mouseCursor,
        InputCounterWidgetBuilder? buildCounter,
        ScrollController? scrollController,
        ScrollPhysics? scrollPhysics,
        List<String>? autofillHints,
        ContentInsertionConfiguration? contentInsertionConfiguration,
        Clip clipBehavior = Clip.hardEdge,
        String? restorationId,
        bool scribbleEnabled = true,
        bool enableIMEPersonalizedLearning = true,
        bool canRequestFocus = true,
        SpellCheckConfiguration? spellCheckConfiguration,
        TextMagnifierConfiguration? magnifierConfiguration,
        bool obscureText = false,
        String obscuringCharacter = '•',
        bool autocorrect = true,
        SmartDashesType? smartDashesType,
        SmartQuotesType? smartQuotesType,
        bool enableSuggestions = true,
        int maxLines = 1,
        int? minLines,
        bool expands = false,
        int? maxLength,
        MaxLengthEnforcement? maxLengthEnforcement,
        ValueChanged<String>? onChanged,
        VoidCallback? onEditingComplete,
        ValueChanged<String>? onSubmitted,
        AppPrivateCommandCallback? onAppPrivateCommand,
        List<TextInputFormatter>? inputFormatters,
        bool? enabled,
        bool? ignorePointers,
        double cursorWidth = 2.0,
        double? cursorHeight,
        Radius? cursorRadius,
        bool? cursorOpacityAnimates,
        Color? cursorColor,
        Color? cursorErrorColor,
        Brightness? keyboardAppearance,
        EdgeInsets scrollPadding = const EdgeInsets.all(20.0),
        DragStartBehavior dragStartBehavior = DragStartBehavior.start,
      }) {
    return TextField(
      key: key,
      controller: controller,
      focusNode: focusNode,
      undoController: undoHistoryController,
      keyboardType: keyboardType,
      textInputAction: textInputAction,
      textCapitalization: textCapitalization,
      style: Theme.of(context).textTheme.labelLarge?.copyWith(color: (Theme.of(context).brightness == Brightness.light) ? AppColors.c000000 : AppColors.cFFFFFF),
      strutStyle: strutStyle,
      textAlign: textAlign,
      textAlignVertical: textAlignVertical,
      textDirection: textDirection,
      readOnly: readOnly,
      toolbarOptions: toolbarOptions,
      showCursor: showCursor,
      autofocus: autofocus,
      enableInteractiveSelection: enableInteractiveSelection,
      selectionControls: selectionControls,
      onTap: onTap,
      onTapOutside: onTapOutside,
      onTapAlwaysCalled: onTapAlwaysCalled,
      mouseCursor: mouseCursor,
      buildCounter: buildCounter,
      scrollController: scrollController,
      scrollPhysics: scrollPhysics,
      autofillHints: autofillHints,
      contentInsertionConfiguration: contentInsertionConfiguration,
      clipBehavior: clipBehavior,
      restorationId: restorationId,
      scribbleEnabled: scribbleEnabled,
      enableIMEPersonalizedLearning: enableIMEPersonalizedLearning,
      canRequestFocus: canRequestFocus,
      spellCheckConfiguration: spellCheckConfiguration,
      magnifierConfiguration: magnifierConfiguration,
      obscureText: obscureText,
      obscuringCharacter: obscuringCharacter,
      autocorrect: autocorrect,
      smartDashesType: smartDashesType,
      smartQuotesType: smartQuotesType,
      enableSuggestions: enableSuggestions,
      maxLines: maxLines,
      minLines: minLines,
      expands: expands,
      maxLength: maxLength,
      maxLengthEnforcement: maxLengthEnforcement,
      onChanged: onChanged,
      onEditingComplete: onEditingComplete,
      onSubmitted: onSubmitted,
      onAppPrivateCommand: onAppPrivateCommand,
      inputFormatters: inputFormatters,
      enabled: enabled,
      ignorePointers: ignorePointers,
      cursorWidth: cursorWidth,
      cursorHeight: cursorHeight,
      cursorRadius: cursorRadius,
      cursorOpacityAnimates: cursorOpacityAnimates,
      cursorColor: (Theme.of(context).brightness == Brightness.light) ? AppColors.c000000 : AppColors.cFFFFFF,
      cursorErrorColor: cursorErrorColor,
      keyboardAppearance: keyboardAppearance,
      scrollPadding: scrollPadding,
      dragStartBehavior: dragStartBehavior,
      decoration: InputDecoration(
        border: OutlineInputBorder(),
        filled: true,
        fillColor: (Theme.of(context).brightness == Brightness.light) ? AppColors.cFFFFFF : AppColors.c353d4a,
        contentPadding: const EdgeInsets.symmetric(vertical: 5, horizontal: 8),
        hintText: hintText,
        enabledBorder: InputBorder.none,
        focusedBorder: InputBorder.none,
        counterText: "",
      ),
    );
  }
}
